******* aircraft *********



SELECT a.Aircraft 
FROM aircraft a 
INNER JOIN airport_aircraft aa ON a.Aircraft_ID = aa.Aircraft_ID 
INNER JOIN airport ap ON aa.Airport_ID = ap.Airport_ID 
WHERE ap.Airport_Name IN ('London Heathrow', 'London Gatwick')





SELECT Aircraft 
FROM aircraft 
INNER JOIN airport_aircraft ON aircraft.Aircraft_ID = airport_aircraft.Aircraft_ID 
INNER JOIN airport ON airport_aircraft.Airport_ID = airport.Airport_ID 
WHERE airport.Airport_Name IN ('London Heathrow', 'Gatwick')





SELECT Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes
FROM airport
WHERE International_Passengers = (SELECT MAX(International_Passengers) FROM airport)


******* allergy_1 *********



SELECT AllergyType, COUNT(Allergy) 
FROM Allergy_Type 
INNER JOIN Has_Allergy 
ON Allergy_Type.Allergy = Has_Allergy.Allergy 
GROUP BY AllergyType





SELECT AllergyType, COUNT(Allergy) AS NumAllergies
FROM Allergy_Type
INNER JOIN Has_Allergy
ON Allergy_Type.Allergy = Has_Allergy.Allergy
GROUP BY AllergyType
ORDER BY NumAllergies DESC
LIMIT 1





SELECT AllergyType, COUNT(Allergy) AS NumAllergies
FROM Allergy_Type
INNER JOIN Has_Allergy
ON Allergy_Type.Allergy = Has_Allergy.Allergy
GROUP BY AllergyType
ORDER BY NumAllergies ASC
LIMIT 1



 who have an allergy?

SELECT Fname, LName 
FROM Student 
INNER JOIN Has_Allergy 
ON Student.StuID = Has_Allergy.StuID 
INNER JOIN Allergy_Type 
ON Has_Allergy.Allergy = Allergy_Type.Allergy





SELECT Allergy, COUNT(StuID) AS NumStudents
FROM Has_Allergy
INNER JOIN Allergy_Type
ON Has_Allergy.Allergy = Allergy_Type.Allergy
GROUP BY Allergy
ORDER BY NumStudents DESC
LIMIT 1





SELECT Allergy, COUNT(*) AS Total
FROM Has_Allergy
INNER JOIN Allergy_Type
ON Has_Allergy.Allergy = Allergy_Type.Allergy
GROUP BY Allergy
ORDER BY Total DESC
LIMIT 1





SELECT Allergy, COUNT(StuID) AS 'Number of Students Affected'
FROM Has_Allergy
JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy
GROUP BY Allergy





SELECT Allergy, COUNT(StuID) AS 'Number of Students'
FROM Has_Allergy
INNER JOIN Allergy_Type
ON Has_Allergy.Allergy = Allergy_Type.Allergy
GROUP BY Allergy





SELECT Allergy, AllergyType 
FROM Allergy_Type 
INNER JOIN Has_Allergy 
ON Allergy_Type.Allergy = Has_Allergy.Allergy 
INNER JOIN Student 
ON Has_Allergy.StuID = Student.StuID 
WHERE Student.Fname = 'Lisa' 
ORDER BY Allergy





SELECT Allergy, AllergyType 
FROM Allergy_Type 
INNER JOIN Has_Allergy ON Allergy_Type.Allergy = Has_Allergy.Allergy 
INNER JOIN Student ON Has_Allergy.StuID = Student.StuID 
WHERE Student.Fname = 'Lisa' 
ORDER BY Allergy


******* apartment_rentals *********

 who have booked an apartment in a building with a building_id of 1

SELECT guest_first_name, guest_last_name
FROM Guests
INNER JOIN Apartment_Bookings ON Guests.guest_id = Apartment_Bookings.guest_id
INNER JOIN Apartments ON Apartment_Bookings.apt_id = Apartments.apt_id
WHERE Apartments.building_id = 1





SELECT apt_number
FROM Apartments
WHERE bedroom_count = (SELECT MAX(bedroom_count) FROM Apartments)
ORDER BY bedroom_count DESC



 type code and the average room count

SELECT apt_type_code, AVG(room_count) AS avg_room_count
FROM Apartments
GROUP BY apt_type_code
ORDER BY avg_room_count DESC
LIMIT 3


******* assets_maintenance *********



SELECT Parts.part_name, Parts.part_id
FROM Parts
INNER JOIN Asset_Parts ON Parts.part_id = Asset_Parts.part_id
INNER JOIN Fault_Log_Parts ON Asset_Parts.part_id = Fault_Log_Parts.part_id
GROUP BY Parts.part_name, Parts.part_id
HAVING COUNT(Fault_Log_Parts.part_fault_id) > 2





SELECT e.first_name, e.last_name
FROM Engineers e
LEFT JOIN Engineer_Visits ev ON e.engineer_id = ev.engineer_id
WHERE ev.engineer_visit_id IS NULL





SELECT Parts.part_id, Parts.part_name
FROM Parts
INNER JOIN Skills_Required_To_Fix ON Parts.part_id = Skills_Required_To_Fix.part_fault_id
GROUP BY Parts.part_id, Parts.part_name
ORDER BY COUNT(Skills_Required_To_Fix.skill_id) DESC





SELECT engineer_id, first_name, last_name
FROM Maintenance_Engineers
INNER JOIN Engineer_Visits
ON Maintenance_Engineers.engineer_id = Engineer_Visits.engineer_id
GROUP BY engineer_id
ORDER BY COUNT(*) ASC
LIMIT 1





SELECT skill_id, skill_description
FROM Skills
INNER JOIN Skills_Required_To_Fix ON Skills.skill_id = Skills_Required_To_Fix.skill_id
GROUP BY skill_id
ORDER BY COUNT(*) DESC
LIMIT 1





SELECT company_type 
FROM Third_Party_Companies 
INNER JOIN Maintenance_Contracts 
ON Third_Party_Companies.company_id = Maintenance_Contracts.maintenance_contract_company_id 
ORDER BY contract_end_date DESC 
LIMIT 1


******* behavior_monitoring *********



SELECT teacher_id, first_name
FROM Teachers
INNER JOIN Assessment_Notes
ON Teachers.teacher_id = Assessment_Notes.teacher_id
GROUP BY teacher_id
ORDER BY COUNT(*) DESC
LIMIT 3





SELECT incident_type_code, incident_type_description
FROM Ref_Incident_Type
INNER JOIN Behavior_Incident
ON Ref_Incident_Type.incident_type_code = Behavior_Incident.incident_type_code
GROUP BY incident_type_code
ORDER BY COUNT(*) DESC
LIMIT 1


******* body_builder *********
******* book_2 *********



SELECT Publisher 
FROM publication 
WHERE Price > 10000000 OR Price < 5000000


******* browser_web *********
******* candidate_poll *********
******* cinema *********



SELECT Name, Opening_year, Capacity 
FROM cinema


******* climbing *********



SELECT DISTINCT Name 
FROM mountain 
INNER JOIN climber 
ON mountain.Mountain_ID = climber.Mountain_ID 
WHERE climber.Country = 'West Germany'





SELECT Name 
FROM mountain 
INNER JOIN climber 
ON mountain.Mountain_ID = climber.Mountain_ID 
WHERE climber.Country = 'West Germany'





SELECT DISTINCT Country 
FROM mountain 
WHERE Height > 5600 OR Height < 5200





SELECT DISTINCT Country 
FROM mountain 
WHERE Height > 5600 OR Height < 5200


******* club_1 *********



SELECT ClubName, COUNT(StuID) AS 'Number of Members'
FROM Student
JOIN Member_of_club ON Student.StuID = Member_of_club.StuID
JOIN Club ON Member_of_club.ClubID = Club.ClubID
WHERE Major = '600'
GROUP BY ClubName
ORDER BY COUNT(StuID) DESC
LIMIT 1


******* coffee_shop *********



SELECT Address 
FROM shop 
INNER JOIN member ON shop.Shop_ID = member.Shop_ID 
WHERE member.Age < 30 AND member.Age > 40


******* college_3 *********

 ¡°Database¡±

SELECT Fname, Lname 
FROM Faculty 
INNER JOIN Course 
ON Faculty.FacID = Course.Instructor 
WHERE Course.CName = 'Database'


******* company_employee *********
******* company_office *********

 and have moved into a building with more than 10 stories

SELECT COUNT(*) 
FROM Companies c 
INNER JOIN Office_locations o 
ON c.id = o.company_id 
INNER JOIN buildings b 
ON o.building_id = b.id 
WHERE c.Industry IN ('Banking', 'Conglomerate') 
AND b.Stories > 10


******* county_public_safety *********



SELECT Police_force 
FROM county_public_safety 
WHERE Location NOT LIKE '%East%'


******* cre_Doc_Control_Systems *********



SELECT Ref_Shipping_Agents.shipping_agent_name, COUNT(Documents.document_id) AS 'Number of Documents'
FROM Documents
INNER JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code
GROUP BY Ref_Shipping_Agents.shipping_agent_name
ORDER BY COUNT(Documents.document_id) DESC


******* cre_Doc_Tracking_DB *********



SELECT Role_Code, COUNT(Employee_ID) AS 'Number of Employees'
FROM Roles
LEFT JOIN Employees
ON Roles.Role_Code = Employees.Role_Code
GROUP BY Role_Code





SELECT Role_Code, COUNT(Employee_ID) AS Num_Employees
FROM Roles
INNER JOIN Employees
ON Roles.Role_Code = Employees.Role_Code
GROUP BY Role_Code
ORDER BY Num_Employees DESC
LIMIT 1





SELECT Role_Code 
FROM Roles 
INNER JOIN Employees 
ON Roles.Role_Code = Employees.Role_Code 
GROUP BY Role_Code 
HAVING COUNT(Employee_ID) >= 3





SELECT Role_Code 
FROM Roles 
INNER JOIN Employees 
ON Roles.Role_Code = Employees.Role_Code 
GROUP BY Role_Code 
ORDER BY COUNT(Employee_ID) ASC 
LIMIT 1





SELECT DISTINCT Location_Code 
FROM Ref_Locations 
INNER JOIN Document_Locations 
ON Ref_Locations.Location_Code = Document_Locations.Location_Code





SELECT DISTINCT Location_Code 
FROM Ref_Locations 
INNER JOIN Document_Locations 
ON Ref_Locations.Location_Code = Document_Locations.Location_Code





SELECT Location_Code 
FROM Ref_Locations 
INNER JOIN Document_Locations 
ON Ref_Locations.Location_Code = Document_Locations.Location_Code 
GROUP BY Location_Code 
HAVING COUNT(Document_ID) >= 3


******* csu_1 *********



SELECT Campus 
FROM campuses 
WHERE County = 'Orange' 
AND Year = 2002 
AND Faculty > (SELECT MAX(Faculty) 
               FROM campuses 
               WHERE County = 'Orange' 
               AND Year = 2002) 





SELECT Campus 
FROM faculty 
WHERE Year = 2004 
AND Faculty BETWEEN 600 AND 1000





SELECT Campus 
FROM faculty 
WHERE Year = 2004 
AND Faculty BETWEEN 600 AND 1000





SELECT COUNT(*) 
FROM faculty 
WHERE Year = 2001 
AND Campus = (SELECT Campus 
              FROM degrees 
              WHERE Year = 2001 
              ORDER BY Degrees ASC 
              LIMIT 1)





SELECT MIN(Degrees) AS Least_Degrees, Faculty 
FROM campuses 
INNER JOIN degrees ON campuses.Id = degrees.Campus 
INNER JOIN faculty ON campuses.Id = faculty.Campus 
WHERE Year = 2001 
GROUP BY Faculty



 University in 2020?

SELECT Undergraduate 
FROM discipline_enrollments 
WHERE Campus = 'San Jose State University' 
AND Year = 2020


******* customers_and_invoices *********



SELECT c.customer_id, CONCAT(c.customer_first_name, ' ', c.customer_middle_initial, ' ', c.customer_last_name) AS full_name
FROM Customers c
INNER JOIN Accounts a ON c.customer_id = a.customer_id
GROUP BY c.customer_id
ORDER BY COUNT(a.account_id) DESC
LIMIT 1





SELECT customer_id, customer_first_name, customer_last_name, COUNT(account_id) AS 'Number of Accounts'
FROM Customers
LEFT JOIN Accounts ON Customers.customer_id = Accounts.customer_id
GROUP BY customer_id





SELECT product_color FROM Products





SELECT o.order_id, o.order_details 
FROM Orders o 
INNER JOIN Invoices i 
ON o.order_id = i.order_id 
GROUP BY o.order_id 
HAVING COUNT(i.invoice_number) >= 2


******* customers_campaigns_ecommerce *********
******* customers_card_transactions *********



SELECT c.customer_id, CONCAT(c.customer_first_name, ' ', c.customer_last_name) AS full_name
FROM Customers c
INNER JOIN Accounts a ON c.customer_id = a.customer_id
GROUP BY c.customer_id
ORDER BY COUNT(a.account_id) ASC
LIMIT 1





SELECT transaction_type FROM Financial_Transactions


******* customer_deliveries *********
******* debate *********
******* decoration_competition *********
******* department_management *********
******* department_store *********



SELECT staff_id, staff_gender 
FROM Staff 
INNER JOIN Staff_Department_Assignments 
ON Staff.staff_id = Staff_Department_Assignments.staff_id 
WHERE job_title_code = 'Department Manager'





SELECT staff_id, staff_gender 
FROM Staff 
INNER JOIN Staff_Department_Assignments 
ON Staff.staff_id = Staff_Department_Assignments.staff_id 
WHERE job_title_code = 'Department Manager'





SELECT DISTINCT customer_name 
FROM Customers 
INNER JOIN Customer_Orders 
ON Customers.customer_id = Customer_Orders.customer_id 
WHERE order_status_code = 'Pending' 
ORDER BY customer_id





SELECT product_id 
FROM Products 
WHERE supplier_id = 2 
AND product_price > (SELECT AVG(product_price) FROM Products)





SELECT dept_store_chain_id
FROM Department_Store_Chain
INNER JOIN Department_Stores
ON Department_Store_Chain.dept_store_chain_id = Department_Stores.dept_store_chain_id
GROUP BY dept_store_chain_id
ORDER BY COUNT(*) DESC
LIMIT 2





SELECT dept_store_chain_id, COUNT(dept_store_id) AS store_count
FROM Department_Store_Chain
INNER JOIN Department_Stores
ON Department_Store_Chain.dept_store_chain_id = Department_Stores.dept_store_chain_id
GROUP BY dept_store_chain_id
ORDER BY store_count DESC
LIMIT 2





SELECT staff_id, staff_name 
FROM Staff 
INNER JOIN Staff_Department_Assignments 
ON Staff.staff_id = Staff_Department_Assignments.staff_id 
ORDER BY date_assigned_to - date_assigned_from ASC 
LIMIT 1





SELECT staff_id, staff_name 
FROM Staff 
INNER JOIN Staff_Department_Assignments 
ON Staff.staff_id = Staff_Department_Assignments.staff_id 
ORDER BY date_assigned_from ASC 
LIMIT 1





SELECT customer_name, customer_id 
FROM Customers 
INNER JOIN Customer_Addresses 
ON Customers.customer_id = Customer_Addresses.customer_id 
INNER JOIN Addresses 
ON Customer_Addresses.address_id = Addresses.address_id 
WHERE address_details LIKE '%TN%'





SELECT staff_name, staff_gender 
FROM Staff 
INNER JOIN Staff_Department_Assignments 
ON Staff.staff_id = Staff_Department_Assignments.staff_id 
WHERE YEAR(date_assigned_from) = 2016





SELECT staff_name, staff_gender 
FROM Staff 
INNER JOIN Staff_Department_Assignments 
ON Staff.staff_id = Staff_Department_Assignments.staff_id 
WHERE YEAR(date_assigned_from) = 2016





SELECT product_id 
FROM Order_Items 
GROUP BY product_id 
HAVING COUNT(order_id) > 3 OR SUM(total_amount_purchased) > 80000





SELECT DISTINCT product_name 
FROM Products 
WHERE product_id IN (SELECT product_id 
                     FROM Customer_Orders 
                     GROUP BY product_id 
                     HAVING COUNT(DISTINCT customer_id) > 1)





SELECT staff_name, staff_gender 
FROM Staff 
INNER JOIN Staff_Department_Assignments 
ON Staff.staff_id = Staff_Department_Assignments.staff_id 
WHERE job_title_code = 'Sales Person' 
AND staff_id NOT IN (SELECT staff_id 
                     FROM Staff_Department_Assignments 
                     WHERE job_title_code = 'Clerical Staff') 
GROUP BY staff_name, staff_gender





SELECT customer_id, customer_name 
FROM Customers 
INNER JOIN Customer_Addresses 
ON Customers.customer_id = Customer_Addresses.customer_id 
INNER JOIN Addresses 
ON Customer_Addresses.address_id = Addresses.address_id 
WHERE Addresses.address_details LIKE '%WY%' 
AND Customers.payment_method_code != 'credit_card'





SELECT customer_id, customer_name 
FROM Customers 
INNER JOIN Customer_Addresses 
ON Customers.customer_id = Customer_Addresses.customer_id 
INNER JOIN Addresses 
ON Customer_Addresses.address_id = Addresses.address_id 
WHERE address_details LIKE '%WY%' 
AND payment_method_code != 'credit_card'


******* device *********
******* document_management *********



SELECT d.document_code, d.document_type_code, d.document_structure_code
FROM Documents d
INNER JOIN (SELECT document_type_code, COUNT(*) AS type_count
            FROM Documents
            GROUP BY document_type_code
            ORDER BY type_count DESC
            LIMIT 3) AS t ON d.document_type_code = t.document_type_code
INNER JOIN (SELECT document_structure_code, COUNT(*) AS structure_count
            FROM Documents
            GROUP BY document_structure_code
            ORDER BY structure_count DESC
            LIMIT 3) AS s ON d.document_structure_code = s.document_structure_code





SELECT Documents.document_name 
FROM Documents 
INNER JOIN (SELECT document_structure_code, COUNT(*) AS structure_count 
            FROM Documents 
            GROUP BY document_structure_code 
            ORDER BY structure_count DESC 
            LIMIT 3) AS Structures 
ON Documents.document_structure_code = Structures.document_structure_code 
INNER JOIN (SELECT document_type_code, COUNT(*) AS type_count 
            FROM Documents 
            GROUP BY document_type_code 
            ORDER BY type_count DESC 
            LIMIT 3) AS Types 
ON Documents.document_type_code = Types.document_type_code





SELECT user_name, password 
FROM Users 
INNER JOIN (SELECT role_code, COUNT(*) AS role_count 
            FROM Users 
            GROUP BY role_code 
            ORDER BY role_count DESC 
            LIMIT 1) AS most_popular_role 
ON Users.role_code = most_popular_role.role_code





SELECT user_name, password 
FROM Users 
WHERE role_code = (SELECT role_code 
                   FROM Roles 
                   GROUP BY role_code 
                   ORDER BY COUNT(*) DESC 
                   LIMIT 1)





SELECT Documents.document_name
FROM Documents
LEFT JOIN Document_Sections_Images
ON Documents.document_code = Document_Sections_Images.document_code
WHERE Document_Sections_Images.image_id IS NULL





SELECT role_description 
FROM Roles 
INNER JOIN Users 
ON Roles.role_code = Users.role_code 
WHERE user_login IS NOT NULL 
ORDER BY access_count DESC 
LIMIT 1


******* election *********



SELECT Year 
FROM party 
WHERE Governor = 'Eliot Spitzer'





SELECT Delegate, Party 
FROM election 
JOIN party 
ON election.Party = party.Party





SELECT Delegate, Party 
FROM election 
JOIN party 
ON election.Party = party.Party





SELECT Party, Governor 
FROM party 
INNER JOIN election 
ON party.Party_ID = election.Party 
WHERE District = 1





SELECT Party, Comptroller 
FROM party 
INNER JOIN election 
ON party.Party_ID = election.Party 
WHERE election.District IN (1,2)





SELECT Governor, COUNT(*) AS Num_Governor 
FROM party 
GROUP BY Governor 
ORDER BY Num_Governor DESC





SELECT Governor, COUNT(*) AS Frequency 
FROM party 
GROUP BY Governor 
ORDER BY Frequency DESC





SELECT Comptroller, COUNT(Comptroller) AS Times_Comptroller 
FROM party 
GROUP BY Comptroller 
ORDER BY Times_Comptroller DESC



 "Education" committee

SELECT Party 
FROM election 
WHERE Committee IN ('Appropriations', 'Education') 
GROUP BY Party 
HAVING COUNT(DISTINCT Delegate) = 2


******* election_representative *********



SELECT DISTINCT Party 
FROM representative 
WHERE State = 'New York' OR State = 'Pennsylvania'


******* entertainment_awards *********



SELECT Type, COUNT(*) AS Num_of_Artwork
FROM artwork
GROUP BY Type
ORDER BY Num_of_Artwork DESC





SELECT Year 
FROM festival_detail 
WHERE Location IN ('United States', 'Outside United States') 
GROUP BY Year


******* entrepreneur *********



SELECT Investor 
FROM entrepreneur 
WHERE Money_Requested > 140000 OR Money_Requested < 120000 
GROUP BY Investor


******* e_learning *********



SELECT personal_name, family_name, author_id 
FROM Course_Authors_and_Tutors 
INNER JOIN Courses 
ON Course_Authors_and_Tutors.author_id = Courses.author_id 
GROUP BY author_id 
ORDER BY COUNT(*) DESC 
LIMIT 1





SELECT personal_name, family_name, author_id
FROM Course_Authors_and_Tutors
INNER JOIN Courses ON Course_Authors_and_Tutors.author_id = Courses.author_id
GROUP BY author_id
ORDER BY COUNT(*) DESC
LIMIT 1





SELECT student_id, login_name
FROM Students
INNER JOIN Student_Course_Enrolment
ON Students.student_id = Student_Course_Enrolment.student_id
GROUP BY student_id
ORDER BY COUNT(*) DESC
LIMIT 1





SELECT login_name
FROM Course_Authors_and_Tutors
INNER JOIN Students
ON Course_Authors_and_Tutors.login_name = Students.login_name


******* farm *********
******* film_rank *********
******* flight_1 *********

?

SELECT a.name 
FROM flight f 
INNER JOIN aircraft a 
ON f.aid = a.aid 
WHERE f.flno = 99





SELECT e.name, e.salary 
FROM employee e 
INNER JOIN certificate c ON e.eid = c.eid 
INNER JOIN aircraft a ON c.aid = a.aid 
WHERE a.distance > 5000 
ORDER BY COUNT(c.eid) DESC 
LIMIT 1


******* game_injury *********



SELECT s.name, MAX(s.Home_Games) AS Max_Home_Games, MIN(s.Home_Games) AS Min_Home_Games, AVG(s.Home_Games) AS Avg_Home_Games
FROM stadium s
GROUP BY s.name





SELECT s.name 
FROM stadium s 
INNER JOIN game g ON s.id = g.stadium_id 
INNER JOIN injury_accident i ON g.id = i.game_id 
WHERE i.Player IN ('Walter Samuel', 'Thiago Motta')


******* gas_company *********
******* gymnast *********



SELECT Hometown
FROM people
WHERE People_ID IN (SELECT People_ID
                    FROM gymnast
                    GROUP BY People_ID
                    HAVING COUNT(*) > 1)
GROUP BY Hometown





SELECT Hometown 
FROM people 
WHERE Age > 23 OR Age < 20





SELECT Hometown 
FROM people 
WHERE Age > 23 OR Age < 20


******* hospital_1 *********



SELECT Name 
FROM Physician 
INNER JOIN Patient 
ON Physician.EmployeeID = Patient.PCP 
GROUP BY Name 
HAVING COUNT(Patient.SSN) > 1





SELECT Name
FROM Physician
INNER JOIN Prescribes
ON Physician.EmployeeID = Prescribes.Physician
INNER JOIN Medication
ON Prescribes.Medication = Medication.Code
WHERE Medication.Name = 'Thesisin'





SELECT Name 
FROM Physician 
INNER JOIN Prescribes 
ON Physician.EmployeeID = Prescribes.Physician 
INNER JOIN Medication 
ON Prescribes.Medication = Medication.Code 
WHERE Medication.Name = 'Thesisin'





SELECT Name, Position 
FROM Physician 
INNER JOIN Prescribes 
ON Physician.EmployeeID = Prescribes.Physician 
INNER JOIN Medication 
ON Prescribes.Medication = Medication.Code 
WHERE Medication.Brand = 'X'





SELECT Name, Position 
FROM Physician 
INNER JOIN Prescribes 
ON Physician.EmployeeID = Prescribes.Physician 
INNER JOIN Medication 
ON Prescribes.Medication = Medication.Code 
WHERE Medication.Brand = 'X'





SELECT Patient.Name 
FROM Patient 
INNER JOIN Stay ON Patient.SSN = Stay.Patient 
INNER JOIN Undergoes ON Stay.StayID = Undergoes.Stay 
WHERE Stay.Room = 111





SELECT Patient.Name 
FROM Patient 
INNER JOIN Stay ON Patient.SSN = Stay.Patient 
INNER JOIN Room ON Stay.Room = Room.RoomNumber 
INNER JOIN Undergoes ON Stay.StayID = Undergoes.Stay 
WHERE Room.RoomNumber = 111





SELECT Name
FROM Physician
INNER JOIN Prescribes
ON Physician.EmployeeID = Prescribes.Physician
WHERE Prescribes.Dose = (SELECT MAX(Dose) FROM Prescribes)






SELECT Name
FROM Physician
INNER JOIN Prescribes
ON Physician.EmployeeID = Prescribes.Physician
WHERE Prescribes.Dose = (SELECT MAX(Dose) FROM Prescribes)






SELECT TOP 3 Name, Cost
FROM Procedures
ORDER BY Cost DESC





SELECT TOP 3 Name, Cost
FROM Procedures
ORDER BY Cost DESC





SELECT Procedures.Name
FROM Procedures
WHERE Procedures.Cost > 1000
AND Procedures.Code NOT IN (SELECT Trained_In.Treatment
                           FROM Trained_In
                           WHERE Trained_In.Physician = 'John Wen')





SELECT p.Name
FROM Procedures p
WHERE p.Cost > 1000
AND p.Code NOT IN (SELECT t.Treatment
                   FROM Trained_In t
                   WHERE t.Physician = 'John Wen') 





SELECT Name
FROM Physician
WHERE EmployeeID IN (SELECT Physician
                     FROM Affiliated_With
                     WHERE Department IN (SELECT DepartmentID
                                         FROM Department
                                         WHERE Name IN ('Surgery', 'Psychiatry')))






SELECT Name 
FROM Physician 
INNER JOIN Affiliated_With 
ON Physician.EmployeeID = Affiliated_With.Physician 
INNER JOIN Department 
ON Affiliated_With.Department = Department.DepartmentID 
WHERE Department.Name IN ('Surgery', 'Psychiatry')





SELECT Name 
FROM Physician 
INNER JOIN Affiliated_With 
ON Physician.EmployeeID = Affiliated_With.Physician 
INNER JOIN Department 
ON Affiliated_With.Department = Department.DepartmentID 
WHERE Department.Name IN ('Surgery', 'Psychiatry')


******* hr_1 *********



SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS Full_Name, SALARY 
FROM employees 
WHERE COMMISSION_PCT IS NULL





SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS Full_Name, SALARY
FROM employees
WHERE FIRST_NAME LIKE '%m'





SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS 'Full Name'
FROM employees
WHERE DEPARTMENT_ID IN (70, 90)





SELECT DEPARTMENT_ID
FROM departments d
INNER JOIN employees e ON d.MANAGER_ID = e.MANAGER_ID
GROUP BY DEPARTMENT_ID
HAVING COUNT(*) >= 4





SELECT DEPARTMENT_ID
FROM departments d
INNER JOIN employees e ON d.MANAGER_ID = e.MANAGER_ID
GROUP BY DEPARTMENT_ID
HAVING COUNT(*) > 3





SELECT JOB_ID
FROM job_history
GROUP BY JOB_ID
HAVING COUNT(EMPLOYEE_ID) > 1 AND SUM(DATEDIFF(END_DATE, START_DATE)) > 300





SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS Full_Name 
FROM employees 
WHERE SALARY > (SELECT SALARY FROM employees WHERE EMPLOYEE_ID = 163) 
ORDER BY SALARY DESC





SELECT * 
FROM employees 
WHERE salary > MIN_SALARY 
AND salary < 2500





SELECT e.EMPLOYEE_ID, CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS 'Full Name'
FROM employees e
INNER JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
INNER JOIN employees m ON d.MANAGER_ID = m.EMPLOYEE_ID
WHERE m.FIRST_NAME LIKE '%T%'





SELECT e.EMPLOYEE_ID, CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS Name, e.SALARY
FROM employees e
INNER JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
INNER JOIN employees e2 ON d.DEPARTMENT_ID = e2.DEPARTMENT_ID
WHERE e.SALARY > (SELECT AVG(SALARY) FROM employees)
AND e2.FIRST_NAME LIKE '%J%'
GROUP BY e.EMPLOYEE_ID





SELECT e.EMPLOYEE_ID, CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS Full_Name, e.SALARY
FROM employees e
INNER JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
INNER JOIN employees e2 ON d.DEPARTMENT_ID = e2.DEPARTMENT_ID
WHERE e.SALARY > (SELECT AVG(SALARY) FROM employees)
AND e2.FIRST_NAME LIKE '%J%'
GROUP BY e.EMPLOYEE_ID





SELECT e.EMPLOYEE_ID, CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS Name, j.JOB_TITLE
FROM employees e
INNER JOIN jobs j ON e.JOB_ID = j.JOB_ID
WHERE e.SALARY > (SELECT MAX(SALARY) FROM employees WHERE JOB_ID = (SELECT JOB_ID FROM jobs WHERE JOB_TITLE = 'PU_MAN'))






SELECT e.EMPLOYEE_ID, CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS Full_Name, e.JOB_ID
FROM employees e
JOIN jobs j ON e.JOB_ID = j.JOB_ID
WHERE e.SALARY > (SELECT MAX(SALARY) FROM employees WHERE JOB_ID = (SELECT JOB_ID FROM jobs WHERE JOB_TITLE = 'PU_MAN'))
ORDER BY e.SALARY DESC





SELECT d.DEPARTMENT_ID, CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS 'Full Name', e.SALARY
FROM departments d
INNER JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
WHERE e.SALARY = (SELECT MAX(SALARY) FROM employees WHERE DEPARTMENT_ID = d.DEPARTMENT_ID)
ORDER BY d.DEPARTMENT_ID





SELECT FIRST_NAME, LAST_NAME, CITY
FROM employees
JOIN locations ON employees.LOCATION_ID = locations.LOCATION_ID
WHERE FIRST_NAME LIKE '%z%'





SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS 'Full Name', CITY
FROM employees
JOIN locations USING (LOCATION_ID)
WHERE FIRST_NAME LIKE '%Z%'





SELECT e.EMPLOYEE_ID, CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS 'Full Name', c.COUNTRY_NAME
FROM employees e
INNER JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
INNER JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID
INNER JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID





SELECT e.EMPLOYEE_ID, CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS Full_Name, c.COUNTRY_NAME
FROM employees e
INNER JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
INNER JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID
INNER JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID





SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS Full_Name, SALARY
FROM employees e
INNER JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
INNER JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID
WHERE l.CITY = 'London'


******* insurance_and_eClaims *********



SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid FROM Claim_Headers





SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid
FROM Claim_Headers





SELECT c.Customer_Details 
FROM Customers c 
INNER JOIN Policies p ON c.Customer_ID = p.Customer_ID 
INNER JOIN Claim_Headers ch ON p.Policy_ID = ch.Policy_ID 
WHERE ch.Amount_Paid = (SELECT MIN(Amount_Paid) FROM Claim_Headers) 
GROUP BY c.Customer_Details


******* insurance_fnol *********



SELECT Customers.Customer_Phone 
FROM Customers 
INNER JOIN Customers_Policies 
ON Customers.Customer_ID = Customers_Policies.Customer_ID 
INNER JOIN Available_Policies 
ON Customers_Policies.Policy_ID = Available_Policies.Policy_ID 
WHERE Available_Policies.policy_type_code = 'Life Insurance'





SELECT c.Customer_Phone 
FROM Customers c 
INNER JOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID 
INNER JOIN Available_Policies ap ON cp.Policy_ID = ap.Policy_ID 
WHERE ap.policy_type_code = 'Life Insurance'





SELECT p.policy_type_code 
FROM Customers c 
INNER JOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID 
INNER JOIN Available_Policies p ON cp.Policy_ID = p.Policy_ID 
WHERE c.Customer_name = 'Dayana Robel'





SELECT p.policy_type_code 
FROM Customers c 
INNER JOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID 
INNER JOIN Available_Policies p ON cp.Policy_ID = p.Policy_ID 
WHERE c.Customer_name = 'Dayana Robel'





SELECT Customers.Customer_name, Available_Policies.Date_Opened, Available_Policies.Date_Closed
FROM Customers
INNER JOIN Customers_Policies ON Customers.Customer_ID = Customers_Policies.Customer_ID
INNER JOIN Available_Policies ON Customers_Policies.Policy_ID = Available_Policies.Policy_ID
WHERE Customers.Customer_name LIKE '%Diana%'


******* insurance_policies *********



SELECT c.Start_Date, c.Amount_Claimed
FROM Claims c
INNER JOIN Settlements s ON c.Claim_ID = s.Claim_ID
WHERE c.Amount_Claimed <= (SELECT AVG(Amount_Claimed) FROM Claims)
ORDER BY c.Start_Date



 amount claimed

SELECT Start_Date 
FROM Customer_Policies 
INNER JOIN Claims 
ON Customer_Policies.Policy_ID = Claims.Policy_ID 
WHERE Amount_Claimed <= (SELECT AVG(Amount_Claimed) FROM Claims)


******* journal_committee *********
******* loan_1 *********
******* local_govt_and_lot *********



SELECT service_id, service_details, COUNT(*) AS 'Number of Services Provided'
FROM Services
INNER JOIN Residents_Services
ON Services.service_id = Residents_Services.service_id
GROUP BY service_id
ORDER BY COUNT(*) DESC
LIMIT 1





SELECT DISTINCT thing_id, Type_of_Thing_Code 
FROM Things 
INNER JOIN Timed_Status_of_Things 
ON Things.thing_id = Timed_Status_of_Things.thing_id 
WHERE Timed_Status_of_Things.Status_of_Thing_Code = 'Close' 
OR Timed_Status_of_Things.Date_and_Time < '2017-06-19 02:59:21'


******* local_govt_in_alabama *********



SELECT Event_ID, COUNT(Participant_ID) AS Num_Participants
FROM Events
JOIN Participants_in_Events
ON Events.Event_ID = Participants_in_Events.Event_ID
GROUP BY Event_ID
ORDER BY Num_Participants DESC
LIMIT 1


******* local_govt_mdm *********



SELECT cmi_cross_ref_id, source_system_code
FROM CMI_Cross_References
INNER JOIN Council_Tax
ON CMI_Cross_References.cmi_cross_ref_id = Council_Tax.cmi_cross_ref_id



b of business rates

SELECT cmi_cross_ref_id, master_customer_id, COUNT(business_rates_id) AS nb_business_rates
FROM CMI_Cross_References
INNER JOIN Business_Rates
ON CMI_Cross_References.cmi_cross_ref_id = Business_Rates.cmi_cross_ref_id
GROUP BY cmi_cross_ref_id, master_customer_id





SELECT cmi_cross_ref_id, source_system_code 
FROM CMI_Cross_References 
INNER JOIN Benefits_Overpayments 
ON CMI_Cross_References.cmi_cross_ref_id = Benefits_Overpayments.cmi_cross_ref_id 
ORDER BY Benefits_Overpayments.council_tax_id





SELECT DISTINCT source_system_code 
FROM CMI_Cross_References 
INNER JOIN Customer_Master_Index 
ON CMI_Cross_References.master_customer_id = Customer_Master_Index.master_customer_id 
WHERE cmi_details = 'Gottlieb, Becker and Wyman'


******* machine_repair *********



SELECT Team, COUNT(*) AS Technician_Count
FROM technician
GROUP BY Team
ORDER BY Technician_Count DESC





SELECT Starting_Year 
FROM technician 
WHERE Team IN ('CLE', 'CWS')





SELECT Starting_Year 
FROM technician 
WHERE Team IN ('CLE', 'CWS')


******* manufacturer *********



SELECT Name 
FROM furniture 
WHERE Price_in_Dollar < (SELECT MAX(Price_in_Dollar) FROM furniture_manufacte)


******* match_season *********



SELECT Player, Season, Country
FROM match_season
WHERE Player_ID = Player.Player_ID





SELECT Player 
FROM player 
INNER JOIN match_season 
ON player.Player_ID = match_season.Player 
INNER JOIN country 
ON match_season.Country = country.Country_id 
WHERE country.Country_name = 'Indonesia'





SELECT Position, COUNT(Position) AS Position_Count
FROM match_season
GROUP BY Position
ORDER BY Position_Count DESC





SELECT Country_name 
FROM country 
INNER JOIN match_season 
ON country.Country_id = match_season.Country 
WHERE match_season.Position = 'Forward' OR match_season.Position = 'Defender'





SELECT College 
FROM match_season 
WHERE Position IN ('Midfielder', 'Defender') 
GROUP BY College 
HAVING COUNT(DISTINCT Player) > 1


******* medicine_enzyme_interaction *********



SELECT interaction_type, COUNT(*) AS num_interactions
FROM medicine_enzyme_interaction
GROUP BY interaction_type
ORDER BY num_interactions DESC


******* mountain_photos *********



SELECT c.name, COUNT(p.mountain_id) AS mountain_count
FROM camera_lens c
INNER JOIN photos p ON c.id = p.camera_lens_id
GROUP BY c.name
ORDER BY mountain_count DESC


******* movie_1 *********



SELECT r.name, AVG(r.stars) AS 'Average Rating'
FROM Rating r
JOIN Reviewer rev ON r.rID = rev.rID
GROUP BY r.name





SELECT name 
FROM Reviewer 
INNER JOIN Rating 
ON Reviewer.rID = Rating.rID 
WHERE Rating.ratingDate IS NULL





SELECT name 
FROM Reviewer 
WHERE rID NOT IN (SELECT rID FROM Rating WHERE ratingDate IS NOT NULL)





SELECT title, director 
FROM Movie 
WHERE director = 'James Cameron' 
AND stars > (SELECT AVG(stars) 
             FROM Rating 
             WHERE mID IN (SELECT mID 
                           FROM Movie 
                           WHERE director = 'James Cameron')) 





SELECT r.name, m.title, r.stars 
FROM Movie m 
INNER JOIN Rating r ON m.mID = r.mID 
INNER JOIN Reviewer rev ON r.rID = rev.rID 
WHERE m.director = rev.name





SELECT title, AVG(stars) AS AverageRating
FROM Movie
INNER JOIN Rating ON Movie.mID = Rating.mID
GROUP BY title
ORDER BY AverageRating DESC





SELECT r.rID, m.title, r.stars 
FROM Reviewer r 
INNER JOIN Rating rt ON r.rID = rt.rID 
INNER JOIN Movie m ON m.mID = rt.mID 
WHERE rt.stars = (SELECT MIN(stars) FROM Rating WHERE rID = r.rID) 
ORDER BY r.rID





SELECT m.title, r.stars 
FROM Movie m 
INNER JOIN Rating r ON m.mID = r.mID 
WHERE m.director = ? 
ORDER BY r.stars ASC 
LIMIT 1





SELECT title 
FROM Movie 
INNER JOIN Rating 
ON Movie.mID = Rating.mID 
WHERE stars IN (3,4)





SELECT title 
FROM Movie 
INNER JOIN Rating 
ON Movie.mID = Rating.mID 
WHERE stars >= 3 AND stars <= 4


******* musical *********



SELECT Result, COUNT(*) AS Frequency
FROM musical
GROUP BY Result
ORDER BY Frequency DESC


******* music_1 *********



SELECT artist_name, country FROM artist 
INNER JOIN song ON artist.artist_name = song.artist_name 
WHERE song.rating > 9





SELECT artist_name, country 
FROM artist 
INNER JOIN song ON artist.artist_name = song.artist_name 
WHERE song.rating > 9





SELECT artist_name 
FROM song 
INNER JOIN files ON song.f_id = files.f_id 
ORDER BY files.duration ASC 
LIMIT 1





SELECT artist_name 
FROM song 
INNER JOIN files ON song.f_id = files.f_id 
ORDER BY files.duration ASC 
LIMIT 1





SELECT artist_name, country 
FROM artist 
INNER JOIN song ON artist.artist_name = song.artist_name 
WHERE song.rating IN (SELECT MAX(rating) FROM song ORDER BY rating DESC LIMIT 3) 
ORDER BY rating DESC





SELECT artist_name, country 
FROM artist 
INNER JOIN song ON artist.artist_name = song.artist_name 
INNER JOIN genre ON song.genre_is = genre.g_name 
WHERE rating = (SELECT MAX(rating) FROM genre) 
ORDER BY rating DESC 
LIMIT 3





SELECT COUNT(*) 
FROM song 
WHERE duration BETWEEN 240 AND 260





SELECT AVG(COUNT(song_name)) 
FROM song 
WHERE artist_name IN (SELECT artist_name FROM artist WHERE gender = 'female')





SELECT artist_name 
FROM artist 
INNER JOIN song 
ON artist.artist_name = song.artist_name 
WHERE artist.country = 'UK' 
AND song.languages = 'English'





SELECT artist_name 
FROM artist 
INNER JOIN song ON artist.artist_name = song.artist_name 
WHERE artist.country = 'UK' AND song.languages = 'English'





SELECT f_id 
FROM files 
WHERE formats = 'mp4' AND resolution < 1000





SELECT f_id 
FROM files 
WHERE formats = 'mp4' AND resolution < 1000





SELECT country FROM artist 
INNER JOIN song ON artist.artist_name = song.artist_name 
WHERE gender = 'female' AND languages = 'Bangla'





SELECT artist_name, gender 
FROM artist 
INNER JOIN song ON artist.artist_name = song.artist_name 
ORDER BY resolution ASC 
LIMIT 1





SELECT artist_name, gender 
FROM artist 
INNER JOIN song ON artist.artist_name = song.artist_name 
WHERE resolution = (SELECT MIN(resolution) FROM song) 





SELECT artist_name, country FROM artist 
INNER JOIN song ON artist.artist_name = song.artist_name 
WHERE song_name LIKE '%love%'





SELECT artist_name, country 
FROM artist 
INNER JOIN song 
ON artist.artist_name = song.artist_name 
WHERE song_name LIKE '%love%'





SELECT artist_name, gender 
FROM artist 
INNER JOIN song 
ON artist.artist_name = song.artist_name 
WHERE MONTH(releasedate) = 3





SELECT artist_name, gender 
FROM artist 
INNER JOIN song 
ON artist.artist_name = song.artist_name 
WHERE MONTH(releasedate) = 3





SELECT f_id 
FROM files 
WHERE formats = 'mp4' OR resolution > 720





SELECT f_id 
FROM files 
INNER JOIN song 
ON files.artist_name = song.artist_name 
WHERE formats LIKE '%mp4%' OR resolution > 720





SELECT song_name 
FROM song 
WHERE duration = 240 OR languages = 'English'





SELECT song_name 
FROM song 
WHERE duration BETWEEN 3.5 AND 4.5 
OR languages = 'English'





SELECT languages, COUNT(*) AS language_count
FROM song
GROUP BY languages
ORDER BY language_count DESC





SELECT artist_name 
FROM song 
WHERE resolution > 500 
GROUP BY artist_name, languages 
ORDER BY COUNT(*) DESC





SELECT artist_name 
FROM artist 
INNER JOIN song 
ON artist.artist_name = song.artist_name 
WHERE artist.country = 'UK' 
AND song.languages = 'English'





SELECT artist_name 
FROM artist 
INNER JOIN song ON artist.artist_name = song.artist_name 
WHERE country = 'UK' AND languages = 'English'





SELECT MAX(resolution), MIN(resolution) 
FROM song 
WHERE duration = 3





SELECT MAX(resolution), MIN(resolution)
FROM song
WHERE duration BETWEEN 180 AND 210





SELECT languages, MAX(duration) AS max_duration, MAX(resolution) AS max_resolution
FROM song
GROUP BY languages
ORDER BY languages





SELECT languages, MAX(duration) AS max_duration, MAX(resolution) AS max_resolution
FROM song
GROUP BY languages
ORDER BY languages ASC





SELECT g_name, MIN(duration) AS shortest_duration, MIN(rating) AS lowest_rating
FROM genre
JOIN song ON genre.g_name = song.genre_is
GROUP BY g_name
ORDER BY g_name





SELECT g_name, song_name, duration, rating
FROM genre
JOIN song ON genre.g_name = song.genre_is
ORDER BY g_name ASC, duration ASC, rating ASC





SELECT artist_name, country FROM artist 
INNER JOIN song ON artist.artist_name = song.artist_name 
WHERE resolution > 900





SELECT artist_name, country FROM artist 
INNER JOIN song ON artist.artist_name = song.artist_name 
WHERE resolution > 900





SELECT country FROM artist 
INNER JOIN song ON artist.artist_name = song.artist_name 
GROUP BY country 
ORDER BY COUNT(*) ASC 
LIMIT 1





SELECT country, COUNT(*) AS num_songs
FROM artist
JOIN song ON artist.artist_name = song.artist_name
GROUP BY country
ORDER BY num_songs ASC
LIMIT 1





SELECT f_id 
FROM song 
WHERE resolution > (SELECT resolution 
                    FROM song 
                    WHERE rating < 8) 
ORDER BY f_id





SELECT artist_name 
FROM artist 
INNER JOIN song ON artist.artist_name = song.artist_name 
WHERE song.languages = 'English' 
AND song.rating <= 8





SELECT artist_name 
FROM artist 
INNER JOIN song ON artist.artist_name = song.artist_name 
WHERE song.languages = 'English' 
AND song.rating <= 8


******* network_2 *********



SELECT name 
FROM Person 
INNER JOIN PersonFriend 
ON Person.name = PersonFriend.name 
GROUP BY name 
HAVING COUNT(friend) = 1





SELECT PersonFriend.friend 
FROM Person 
INNER JOIN PersonFriend 
ON Person.name = PersonFriend.name 
WHERE Person.name = 'Alice' 
AND Person.gender = 'female'





SELECT p.name, pf.friend, pf.age
FROM Person p
INNER JOIN PersonFriend pf
ON p.name = pf.name
WHERE pf.age > (SELECT AVG(age) FROM Person)
ORDER BY pf.age DESC





SELECT p.name
FROM Person p
INNER JOIN PersonFriend pf ON p.name = pf.name
GROUP BY p.name
ORDER BY AVG(p2.age) DESC
LIMIT 1


******* news_report *********

 by journalist name

SELECT j.Name AS 'Journalist Name', e.Name AS 'Event Name'
FROM journalist j
INNER JOIN news_report nr ON j.journalist_ID = nr.journalist_ID
INNER JOIN event e ON nr.Event_ID = e.Event_ID
ORDER BY j.Name ASC


******* party_host *********



SELECT Nationality, COUNT(Host_ID) AS Host_Count
FROM host
JOIN party_host ON host.Host_ID = party_host.Host_ID
GROUP BY Nationality
ORDER BY Host_Count DESC
LIMIT 1


******* party_people *********



SELECT Minister 
FROM party 
WHERE Party_name != 'Progress Party' 
AND In_office = 1


******* performance_attendance *********
******* perpetrator *********
******* phone_1 *********
******* phone_market *********



SELECT Carrier, COUNT(*) AS Frequency 
FROM phone 
GROUP BY Carrier 
ORDER BY Frequency DESC


******* pilot_record *********



SELECT Position 
FROM pilot 
WHERE Join_Year > 2005 OR Join_Year < 2000


******* products_for_hire *********



SELECT b.booking_id, MAX(p.amount_of_refund)
FROM Payments p
INNER JOIN Bookings b ON p.booking_id = b.booking_id
GROUP BY b.booking_id
ORDER BY COUNT(p.payment_id) DESC
LIMIT 1





SELECT Discount_Coupons.coupon_amount 
FROM Discount_Coupons 
INNER JOIN Customers 
ON Discount_Coupons.coupon_id = Customers.coupon_id 
WHERE Customers.good_or_bad_customer IN ('good', 'bad')


******* product_catalog *********



SELECT catalog_publisher 
FROM Catalogs 
WHERE catalog_publisher LIKE '%Murray%'





SELECT catalog_publisher 
FROM Catalogs 
WHERE catalog_publisher LIKE '%Murray%'





SELECT catalog_entry_name 
FROM Catalog_Contents 
INNER JOIN (SELECT attribute_id, COUNT(*) AS num_entries 
            FROM Catalog_Contents_Additional_Attributes 
            GROUP BY attribute_id 
            ORDER BY num_entries DESC 
            LIMIT 1) AS most_entries 
ON Catalog_Contents.catalog_entry_id = Catalog_Contents_Additional_Attributes.catalog_entry_id 
WHERE Catalog_Contents_Additional_Attributes.attribute_id = most_entries.attribute_id





SELECT cs.catalog_level_name 
FROM Catalog_Structure cs 
INNER JOIN Catalog_Contents cc 
ON cs.catalog_level_number = cc.catalog_level_number 
AND cs.catalog_id = cc.catalog_id 
WHERE cc.price_in_dollars = (SELECT MIN(price_in_dollars) FROM Catalog_Contents) 
LIMIT 1





SELECT cs.catalog_level_name 
FROM Catalog_Structure cs 
INNER JOIN Catalog_Contents cc 
ON cs.catalog_level_number = cc.catalog_level_number 
AND cs.catalog_id = cc.catalog_id 
WHERE cc.price_in_dollars = (SELECT MIN(price_in_dollars) FROM Catalog_Contents) 
LIMIT 1





SELECT catalog_entry_name 
FROM Catalog_Contents 
WHERE capacity = (SELECT MIN(capacity) FROM Catalog_Contents)





SELECT catalog_entry_name 
FROM Catalog_Contents 
WHERE capacity = (SELECT MIN(capacity) FROM Catalog_Contents)





SELECT attribute_name, attribute_id 
FROM Attribute_Definitions 
INNER JOIN Catalog_Contents_Additional_Attributes 
ON Attribute_Definitions.attribute_id = Catalog_Contents_Additional_Attributes.attribute_id 
WHERE attribute_value = 0


******* program_share *********



SELECT c.Owner, SUM(b.Rating_in_percent) AS Total_Rating_Ratio
FROM channel c
INNER JOIN broadcast b ON c.Channel_ID = b.Channel_ID
GROUP BY c.Owner


******* protein_institute *********
******* race_track *********



SELECT Name, Location, Seating 
FROM track 
WHERE Year_Opened = (SELECT MAX(Year_Opened) FROM track)





SELECT Year_Opened 
FROM track 
WHERE Seating >= 5000 OR Seating <= 4000





SELECT Location 
FROM track 
WHERE Seating > 90000 OR Seating < 70000





SELECT Location
FROM track
WHERE Seating > 90000 OR Seating < 70000


******* restaurant_1 *********



SELECT ResName, Rating
FROM Restaurant
ORDER BY Rating DESC





SELECT Advisor, COUNT(*) AS 'Number of Students'
FROM Student
GROUP BY Advisor
ORDER BY COUNT(*) DESC


******* riding_club *********



SELECT Player_name, Gender 
FROM player 
INNER JOIN player_coach 
ON player.Player_ID = player_coach.Player_ID 
INNER JOIN coach 
ON player_coach.Coach_ID = coach.Coach_ID 
WHERE Starting_year > 2011





SELECT c.Club_ID, c.Club_name, COUNT(pc.Coach_ID) AS 'Number of Coaches'
FROM club c
INNER JOIN player_coach pc ON c.Club_ID = pc.Club_ID
GROUP BY c.Club_ID, c.Club_name





SELECT Club_ID, COUNT(Gold) AS Gold_Medals
FROM match_result
INNER JOIN club ON match_result.Club_ID = club.Club_ID
INNER JOIN coach ON coach.Club_ID = club.Club_ID
GROUP BY Club_ID
ORDER BY COUNT(Gold) DESC
LIMIT 1


******* school_finance *********

000

SELECT School_name 
FROM School 
INNER JOIN endowment 
ON School.School_id = endowment.School_id 
WHERE endowment.amount <= 10000





SELECT School_name 
FROM School 
INNER JOIN budget ON School.School_id = budget.School_id 
INNER JOIN endowment ON School.School_id = endowment.School_id 
WHERE budget.total_budget > 100 OR endowment.amount > 10





SELECT School_name, IHSAA_Football_Class, Mascot 
FROM School 
INNER JOIN budget ON School.School_id = budget.School_id 
WHERE budget.Budgeted > 6000 OR School.Year < 2003 
ORDER BY budget.total_budget_percent_invested DESC, budget.total_budget_percent_budgeted DESC


******* school_player *********



SELECT Denomination 
FROM school 
WHERE Founded < 1890 OR Founded > 1900





SELECT Denomination 
FROM school 
WHERE Founded < 1890 OR Founded > 1900





SELECT sd.Nickname 
FROM school_details sd 
INNER JOIN school_performance sp 
ON sd.School_ID = sp.School_ID 
WHERE sp.Division != 1


******* ship_mission *********
******* soccer_2 *********



SELECT AVG(hours)
FROM Tryout
WHERE decision = 'Train'





SELECT AVG(hours_spent_training) AS Average, MAX(hours_spent_training) AS Maximum, MIN(hours_spent_training) AS Minimum FROM Tryout





SELECT pName 
FROM Player 
INNER JOIN Tryout 
ON Player.pID = Tryout.pID 
WHERE yCard = 'yes' 
ORDER BY enr DESC





SELECT pName 
FROM Player 
ORDER BY yCard DESC





SELECT cName 
FROM College 
INNER JOIN Tryout 
ON College.cName = Tryout.cName 
ORDER BY cName ASC





SELECT AVG(hoursPracticed) 
FROM Tryout 
JOIN Player ON Tryout.pID = Player.pID 
WHERE decision = 'Rejected'





SELECT cName 
FROM College 
INNER JOIN Tryout 
ON College.cName = Tryout.cName 
INNER JOIN Player 
ON Tryout.pID = Player.pID 
WHERE Player.pName LIKE 'D%'





SELECT cName 
FROM College 
INNER JOIN Tryout 
ON College.cName = Tryout.cName 
WHERE Tryout.pPos = 'goalie' 
AND Tryout.decision = 'succeeded'





SELECT cName 
FROM College c 
INNER JOIN Tryout t 
ON c.cName = t.cName 
WHERE t.pPos = 'goalie' AND t.decision = 'success'





SELECT cName, state, enr 
FROM College 
INNER JOIN Tryout 
ON College.cName = Tryout.cName 
WHERE decision = 'accepted' 
GROUP BY cName, state, enr





SELECT cName 
FROM College 
INNER JOIN Tryout 
ON College.cName = Tryout.cName 
WHERE pPos IN ('goalie', 'mid') 
GROUP BY cName





SELECT cName 
FROM College c 
INNER JOIN Tryout t 
ON c.cName = t.cName 
WHERE t.pPos IN ('goal', 'mid-field')





SELECT DISTINCT c.state 
FROM College c 
INNER JOIN Tryout t 
ON c.cName = t.cName 
WHERE t.pPos IN ('goalie', 'mid')





SELECT DISTINCT state 
FROM College c 
INNER JOIN Tryout t 
ON c.cName = t.cName 
WHERE t.pPos IN ('goalie', 'mid-field')





SELECT cName 
FROM College c 
INNER JOIN Tryout t 
ON c.cName = t.cName 
WHERE t.pPos = 'mid' 
AND c.cName NOT IN (SELECT cName 
                    FROM Tryout 
                    WHERE pPos = 'goalie')





SELECT cName 
FROM College 
INNER JOIN Tryout 
ON College.cName = Tryout.cName 
WHERE Tryout.pPos = 'mid' 
AND Tryout.pID NOT IN (SELECT pID FROM Tryout WHERE pPos = 'goalie') 
GROUP BY cName





SELECT DISTINCT c.state 
FROM College c 
INNER JOIN Tryout t 
ON c.cName = t.cName 
WHERE t.pPos = 'mid' 
AND t.pID NOT IN (SELECT pID FROM Tryout WHERE pPos = 'goalie')





SELECT DISTINCT c.state 
FROM College c 
INNER JOIN Tryout t ON c.cName = t.cName 
WHERE t.pPos = 'mid' AND t.decision != 'goalie'


******* solvency_ii *********
******* sports_competition *********



SELECT p1.Position, p2.Position
FROM player p1
INNER JOIN player p2 ON p1.Club_ID = p2.Club_ID
WHERE p1.Points > 20 AND p2.Points < 10





SELECT Country
FROM competition
WHERE Competition_type != 'Friendly'
AND Country NOT IN (SELECT Country
                    FROM competition
                    WHERE Competition_type = 'Friendly')


******* station_weather *********



SELECT train.train_number, train.time 
FROM train 
INNER JOIN route ON train.id = route.train_id 
INNER JOIN station ON route.station_id = station.id 
WHERE train.origin = 'Chennai' AND train.destination = 'Guruvayur'


******* store_product *********

 in the store

SELECT max_page_size 
FROM product 
INNER JOIN store_product 
ON product.product_id = store_product.product_id 
GROUP BY max_page_size 
HAVING COUNT(*) > 3





SELECT MAX(max_page_size) 
FROM product 
INNER JOIN store_product 
ON product.product_id = store_product.product_id 
GROUP BY store_product.store_id 
HAVING COUNT(*) > 3





SELECT District_name, City_Population, City_Area
FROM district
ORDER BY City_Area DESC
LIMIT 3

SELECT SUM(City_Population)
FROM district
ORDER BY City_Area DESC
LIMIT 3





SELECT Store_Name 
FROM store 
INNER JOIN store_district ON store.Store_ID = store_district.Store_ID 
INNER JOIN district ON store_district.District_ID = district.District_ID 
ORDER BY City_Population DESC 
LIMIT 1





SELECT Headquartered_City, COUNT(Store_ID) AS Number_of_Stores
FROM district
INNER JOIN store_district ON district.District_ID = store_district.District_ID
INNER JOIN store ON store_district.Store_ID = store.Store_ID
GROUP BY Headquartered_City





SELECT Headquartered_City, COUNT(Store_ID) AS Store_Count
FROM district
INNER JOIN store_district ON district.District_ID = store_district.District_ID
INNER JOIN store ON store_district.Store_ID = store.Store_ID
GROUP BY Headquartered_City
ORDER BY Store_Count DESC
LIMIT 1





SELECT d.District_name 
FROM district d 
INNER JOIN store_district sd ON d.District_ID = sd.District_ID 
INNER JOIN store s ON sd.Store_ID = s.Store_ID 
WHERE s.Type = 'City Mall' OR s.Type = 'Village Store'


******* storm_record *********



SELECT s.Name 
FROM storm s 
INNER JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID 
INNER JOIN region r ON ar.Region_id = r.Region_id 
WHERE r.Region_name IN ('Afghanistan', 'Albania')





SELECT s.Name 
FROM storm s 
INNER JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID 
INNER JOIN region r ON ar.Region_id = r.Region_id 
WHERE r.Region_name IN ('Afghanistan', 'Albania')


******* student_assessment *********



SELECT student_id
FROM Student_Course_Registrations
GROUP BY student_id
HAVING COUNT(*) = (SELECT MIN(num_courses)
                    FROM (SELECT student_id, COUNT(*) AS num_courses
                          FROM Student_Course_Registrations
                          GROUP BY student_id) AS t)





SELECT s.student_id, s.student_details, sc.registration_date 
FROM Students s 
INNER JOIN Student_Course_Registrations sc 
ON s.student_id = sc.student_id 
ORDER BY sc.registration_date DESC





SELECT candidate_id 
FROM Candidates 
WHERE email_address = 'stanley.monahan@example.org'





SELECT candidate_id
FROM Candidates c
INNER JOIN Candidate_Assessments ca ON c.candidate_id = ca.candidate_id
INNER JOIN Student_Course_Attendance sca ON ca.candidate_id = sca.student_id
ORDER BY sca.date_of_attendance DESC
LIMIT 1





SELECT candidate_id 
FROM Candidates 
INNER JOIN Candidate_Assessments 
ON Candidates.candidate_id = Candidate_Assessments.candidate_id 
WHERE assessment_outcome_code = 'Pass'





SELECT candidate_id 
FROM Candidates 
INNER JOIN Candidate_Assessments 
ON Candidates.candidate_id = Candidate_Assessments.candidate_id 
WHERE assessment_outcome_code = 'Pass'





SELECT course_id 
FROM Courses c 
INNER JOIN Student_Course_Registrations scr ON c.course_id = scr.course_id 
INNER JOIN Student_Course_Attendance sca ON c.course_id = sca.course_id 
WHERE scr.student_id = 121 OR sca.student_id = 121


******* theme_gallery *********



SELECT Theme 
FROM exhibition 
INNER JOIN exhibition_record 
ON exhibition.Exhibition_ID = exhibition_record.Exhibition_ID 
WHERE Attendance < 100 OR Attendance > 500





SELECT Theme 
FROM exhibition 
INNER JOIN exhibition_record 
ON exhibition.Exhibition_ID = exhibition_record.Exhibition_ID 
WHERE Attendance < 100 OR Attendance > 500





SELECT COUNT(*) 
FROM exhibition 
WHERE Attendance > 100 OR Ticket_Price < 10





SELECT COUNT(*) 
FROM exhibition 
WHERE Attendance > 100 OR Ticket_Price < 10


******* tracking_grants_for_research *********

 projects with tasks

SELECT o.organisation_id, o.organisation_details 
FROM Organisations o 
INNER JOIN Projects p ON o.organisation_id = p.organisation_id 
INNER JOIN Tasks t ON p.project_id = t.project_id



 as ¡®University¡¯

SELECT Documents.sent_date 
FROM Documents 
INNER JOIN Grants ON Documents.grant_id = Grants.grant_id 
INNER JOIN Organisations ON Grants.organisation_id = Organisations.organisation_id 
INNER JOIN Organisation_Types ON Organisations.organisation_type = Organisation_Types.organisation_type 
WHERE Grants.grant_amount > 5000 
AND Organisation_Types.organisation_type_description = 'University'





SELECT Documents.sent_date 
FROM Documents 
INNER JOIN Grants 
ON Documents.grant_id = Grants.grant_id 
INNER JOIN Projects 
ON Grants.grant_id = Projects.grant_id 
INNER JOIN Research_Staff 
ON Projects.project_id = Research_Staff.project_id 
WHERE Grants.grant_amount > 5000





SELECT task_id, project_id, task_details 
FROM Tasks 
INNER JOIN Projects 
ON Tasks.project_id = Projects.project_id 
INNER JOIN Project_Outcomes 
ON Projects.project_id = Project_Outcomes.project_id 
WHERE Projects.project_details LIKE '%omnis%' 
OR (SELECT COUNT(*) FROM Project_Outcomes WHERE Project_Outcomes.project_id = Projects.project_id) > 2





SELECT s.staff_id, s.date_from, s.date_to 
FROM Research_Staff s 
INNER JOIN Staff_Roles r ON s.role_code = r.role_code 
WHERE r.role_description = 'Researcher' 
ORDER BY s.date_from





SELECT s.staff_details, r.role_description 
FROM Research_Staff s 
INNER JOIN Staff_Roles r ON s.role_code = r.role_code 
WHERE r.role_description LIKE '%researcher%'





SELECT MAX(date_to) 
FROM Project_Staff 
WHERE project_id = ?





SELECT o.outcome_description 
FROM Projects p 
INNER JOIN Project_Outcomes o ON p.project_id = o.project_id 
WHERE p.project_details = 'sint'



 with the id 'ORG001':

SELECT Projects.project_details 
FROM Projects 
WHERE Projects.organisation_id = 'ORG001'



 are working on projects for organisation with id = 1

SELECT s.role_code, sr.role_description
FROM Staff_Roles sr
INNER JOIN Project_Staff s ON s.role_code = sr.role_code
INNER JOIN Projects p ON p.project_id = s.project_id
WHERE p.organisation_id = 1





SELECT role_code, COUNT(*) AS count
FROM Staff_Roles
INNER JOIN Project_Staff
ON Staff_Roles.role_code = Project_Staff.role_code
GROUP BY role_code
ORDER BY count DESC
LIMIT 1





SELECT role_code, COUNT(*) AS role_count
FROM Staff_Roles
INNER JOIN Project_Staff
ON Staff_Roles.role_code = Project_Staff.role_code
GROUP BY role_code
ORDER BY role_count DESC
LIMIT 1


******* university_basketball *********



SELECT COUNT(DISTINCT School_ID) 
FROM basketball_match 
INNER JOIN university 
ON basketball_match.School_ID = university.School_ID





SELECT COUNT(DISTINCT School_ID) 
FROM basketball_match 
INNER JOIN university 
ON basketball_match.School_ID = university.School_ID


******* wedding *********



SELECT Country 
FROM people 
WHERE Age > 30 OR Age < 25


******* wrestler *********



SELECT Reign, COUNT(*) AS Frequency
FROM wrestler
GROUP BY Reign
ORDER BY Frequency DESC


